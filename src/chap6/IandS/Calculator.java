package chap6.IandS;

public class Calculator {

    static double pi = 3.14159;     //어느 객체에서나 pi는 항상 같은 값이므로 변할 필요가 없으므로 정적 필드 선언. 메모리 효율적.
    //하지만 사실 의미만 그렇지 문법적으로는 얼마든지 수정이 가능한 부분이다. 그래서 완벽히 하려면 static final 을 해줘야 한다.
    //final 만으로는 수정이 불가능하지만, 각 객체마다 포함되기 때문에 메모리 낭비의 우려가 있다. 그래서 2개를 합한 것이 좋아보인다.

    static int plus(int x, int y) { //인스턴스 필드가 쓰이지않고 오로지 매개변수만 쓰이기에 정적 메소드 선언
        return x + y;
    }

    static int minus(int x, int y) {
        return x - y;
    }
    //이렇게 정적 메소드로 선언하면, 각 객체마다 메소드가 포함되어있지 않고 클래스내부에 단 하나만 존재하여 여러 객체들이 공유한다.
    //이 메소드안에는 단 하나의 인스턴스 필드가 없기에 정적 선언이 가능한 것이다.
}
//객체가 없어도 실행된다는 특징 때문에 정적 메소드를 선언 시, 이들 내부에 인스턴스 필드나 인스턴스 메소드를 사용 못한다. psvm 떠올려라 아래것.
//객체 자신의 참조인 this 역시 사용 못함. 정적 메소드에서 인스턴스 멤버를 사용하고 싶다면 블록 안에서 객체를 생성하고 참조변수로 접근해야한다.
//클래스 외부란? 하나의 소스파일(=하나의 클래스이다. 적어도 자바에서는!)을 제외한 모든 곳을 칭한다.
