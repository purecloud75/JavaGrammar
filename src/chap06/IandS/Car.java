package chap06.IandS;

public class Car {

    //필드
    String model;
    int speed;

    //생성자
    public Car(String model) {
        this.model = model;
    }

    //메소드
    void setSpeed(int speed) {
        this.speed = speed;
    }

    void run() {
        for (int i = 10; i <= 30; i += 10) {
            this.setSpeed(i);  //인스턴스멤버인 필드중 하나인 speed 가 쓰인 메소드이기에 이 역시 this 로 명시해준다.
            System.out.println(model + "가 달립니다. 시속 " + this.speed + "km/h");  //단순 명시의 경우, 써도그만 안써도그만
        }
    }
}

/*
클래스는 객체의 설계도이기에 클래스멤버(필드, 메소드)는 당연히 객체에도 포함되어 있어야 한다.
하지만 객체의 필드값이 모두 같아야한다면 이 필드를 각 객체마다 가지고 있을 필요가 있을까? 메모리 낭비이고 코드가 더 길어져서 불편하다.
오히려 이런 필드는 한 곳에 위치시키고 객체들이 공유하는 것이 좋아보인다.
참조타입변수는 스택 영역에, 객체(필드가 저장되어있음)는 힙 영역에, 메소드는 메소드 영역에 위치해 있다.
메소드는 어느 객체에서든 같은 코드이기에 객체안에 굳이 저장할 필요가없지 메모리낭비인데. 그래서 힙 영역이 아닌 메소드 영역에 저장되어있다.
다만 메소드안에 (인스턴스인)필드가 있다면 그에 따른 반환값 등 함수에도 약간의 변화가 있을것이기에 인스턴스 메소드라고 이름 붙여 말한다.

인스턴스 멤버(지금껏 우리가 써온 멤버) : 객체마다 가지고 있는 필드와 메소드
정적(static) 멤버 : 클래스에 위치시키고 객체들이 공유하는 멤버. 그래서 객체를 생성하지 않고 바로 사용할 수 있는 필드와 메소드
static 은 데이터 영역에 할당되고, 이는 객체가 생성되기 전 프로그램이 실행되고 메모리에 로딩될 적에 할당됨. 스택영역의 참조변수들이 얘를 참조!

객체마다 가지고 있어야 할 데이터(객체마다 다른 값)라면 인스턴스 필드로, 공용 데이터라면 정적 필드로 선언하는 것이 좋습니다.
인스턴스 필드를 포함하고 있다면 인스턴스 메소드로, 인스턴스 필드를 포함하고 있지 않다면 정적 메소드로 선언한다. 
인스턴스는 아무것도 안하면되고, 정적은 앞에 static 만 붙이면 완료!

객체 외부에서 인스턴스 멤버에 접근하기 위해 참조변수를 사용하는 것과 마찬가지로, 객체 내부에서도 인스턴스 멤버에 접근하기 위해 this 를 사용
this 는 주로 생성자와 메소드의 매개변수이름이 필드와 동일할 경우, 인스턴스 멤버인 필드임을 명시하고자 할 때 쓰인다.
 */
